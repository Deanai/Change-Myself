常见的数学运算符
+ - * /
基本符合先乘除后加减，同一行优先级从右向左

逻辑运算符
&&
||
!

位运算符
&   位与	a = 0b0; b = 0b1; a&b = 0     a = 0b1; b = 0b1; a&b = 1
|	位或	a = 0b0; b = 0b0; a|b = 0   a = 0b0; b = 0b1; a|b = 1
~	取反	a = 0b0; a = ~a;   a = 0b1    uint8_t a = 1;  a = ~a; a = 254  int8_t a = 1; a = ~a; a = -2;
^	异或	a = 0b0; b = 0b0; a^b = 0  a = 0b1; b =0b1;a^b = 0 a = 0b0; b = 0b1; a^b = 1
<<	左移	a = 0b00010000    a = a << 2;   a = 0b01000000
>>	右移	a = 0b00100000    a = a >> 2;   a = 0b00001000

一维数组
int arr[3];
int arr[] = {1,2,3,4};

没有初始化的数组，初值是乱的

可以通过循环来访问数组的值。

二维数组
int arr[3][4] = {
		{1,2,3,4},
		{5,6,7,8},
		{9,10,11,12}
}

通过嵌套的循环来访问
for(uint8_t i = 0;i < 3;i++){
	for(uint8_t j = 0;j < 4;j++){
		arr[i][j] = 3;
	}
}

字符数组
char str[] = "Hello World";
char str[10] = "'H','e','l','l','o','\0'";
字符串数组的结尾必须以'\0'结束，不然可能会出现问题
当出现‘\0'之后，编译器就认为此字符串已经结束